#include<iostream>
#include<conio.h>
#include<process.h>
using namespace std;
struct tree_node
{
	tree_node *left;
	tree_node *right;
	int data;
} ;
class bst
{
	tree_node *root;
	public:
	bst()
	{
		root=NULL;
	}
	int isempty() 
	{
		return(root==NULL);
	}
	void insert(int item);
	void inordertrav();
	void inorder(tree_node *);
	void postordertrav();
	void postorder(tree_node *);
	void preordertrav();
	void preorder(tree_node *);
};
void bst::insert(int item)
{
	tree_node *p=new tree_node;
	tree_node *parent;
	p->data=item;
	p->left=NULL;
	p->right=NULL;
	parent=NULL;
	if(isempty())
		root=p;
	else
	{
		tree_node *ptr;
		ptr=root;
		while(ptr!=NULL)
		{
			parent=ptr;
			if(item>ptr->data)		
				ptr=ptr->right;
			else
				ptr=ptr->left;
		}	
		if(item<parent->data)
			parent->left=p;
		else
			parent->right=p;
	}
}
void bst::inordertrav()
{
	inorder(root);
}
void bst::inorder(tree_node *ptr)
{
	if(ptr!=NULL)
	{
		inorder(ptr->left);
		cout<<"  "<<ptr->data<<"     ";
		inorder(ptr->right);
	}
}
void bst::postordertrav()
{
	postorder(root);
}
void bst::postorder(tree_node *ptr)
{
	if(ptr!=NULL)
	{
		postorder(ptr->left);
		postorder(ptr->right);
		cout<<"  "<<ptr->data<<"     ";
	}
}
void bst::preordertrav()
{
	preorder(root);
}
void bst::preorder(tree_node *ptr)
{
	if(ptr!=NULL)
	{
		cout<<"  "<<ptr->data<<"     ";
		preorder(ptr->left);
		preorder(ptr->right);
	}
}
int main()
{
	bst b;
	while(1)
	{
		int choice;
		cout<<"\nPress 1 to insert,2 for in-order,3 for post-order,4 for pre-order,0 to exit:\n";
		cin>>choice;
		if(choice==0)
		break;
		else if(choice==1)
		{
			cout<<"Enter the number:";
			int n;
			cin>>n;
			b.insert(n);
		}
		else if(choice==2)
		{
		cout<<"In-Order:";
		b.inordertrav();
		cout<<endl;
		}
		else if(choice==3)
		{
		cout<<"Post-Order:";
		b.postordertrav();
		}
		else
		{
		cout<<"Pre-Order:";
		b.preordertrav();
		}
		
		
	}

}